{
    "root": true,
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": 6,
        "sourceType": "module"
    },
    "plugins": [
        "@typescript-eslint"
    ],
    "extends": [
        "eslint:recommended",
        "react-app",
        "plugin:@typescript-eslint/recommended",
        "plugin:react/recommended",
        "plugin:react-hooks/recommended",
        "prettier"
    ],
    "settings": {
        "react": {
            "createClass": "createReactClass", // Regex for Component Factory to use,
            // default to "createReactClass"
            "pragma": "React", // Pragma to use, default to "React"
            "fragment": "Fragment", // Fragment to use (may be a property of <pragma>), default to "Fragment"
            "version": "detect", // React version. "detect" automatically picks the version you have installed.
            // You can also use `16.0`, `16.3`, etc, if you want to override the detected value.
            // default to latest and warns if missing
            // It will default to "detect" in the future
            "flowVersion": "0.53" // Flow version
        },
        "propWrapperFunctions": [
            // The names of any function used to wrap propTypes, e.g. `forbidExtraProps`. If this isn't set, any propTypes wrapped in a function will be skipped.
            "forbidExtraProps",
            {
                "property": "freeze",
                "object": "Object"
            },
            {
                "property": "myFavoriteWrapper"
            }
        ],
        "componentWrapperFunctions": [
            // The name of any function used to wrap components, e.g. Mobx `observer` function. If this isn't set, components wrapped by these functions will be skipped.
            "observer", // `property`
            {
                "property": "styled"
            }, // `object` is optional
            {
                "property": "observer",
                "object": "Mobx"
            },
            {
                "property": "observer",
                "object": "<pragma>"
            } // sets `object` to whatever value `settings.react.pragma` is set to
        ],
        "linkComponents": [
            // Components used as alternatives to <a> for linking, eg. <Link to={ url } />
            "Hyperlink",
            {
                "name": "Link",
                "linkAttribute": "to"
            }
        ]
    },
    "rules": {
        "react/prop-types": "off",
        "@typescript-eslint/semi": "warn",
        "no-case-declarations": "off",
        "no-constant-condition": [
            "error",
            {
                "checkLoops": false
            }
        ],
        "curly": [
            "warn",
            "all"
        ],
        "eqeqeq": "warn",
        "no-floating-decimal": "warn",
        "no-multi-spaces": "warn",
        "yoda": [
            "warn",
            "never",
            {
                "exceptRange": true
            }
        ],
        "no-shadow": "warn",
        "array-bracket-newline": [
            "warn",
            "consistent"
        ],
        "brace-style": [
            "warn",
            "1tbs"
        ],
        "comma-spacing": [
            "warn",
            {
                "before": false,
                "after": true
            }
        ],
        "no-unneeded-ternary": "warn",
        "quotes": [
            "warn",
            "single"
        ],
        "space-before-function-paren": [
            "warn",
            {
                "anonymous": "ignore",
                "named": "never",
                "asyncArrow": "always"
            }
        ],
        "space-in-parens": [
            "warn",
            "never"
        ],
        "space-unary-ops": [
            "warn",
            {
                "words": true,
                "nonwords": false
            }
        ],
        "spaced-comment": [
            "warn",
            "always"
        ],
        "switch-colon-spacing": [
            "error",
            {
                "before": false,
                "after": true
            }
        ],
        "arrow-body-style": [
            "warn",
            "as-needed"
        ],
        "array-bracket-spacing": "warn",
        "no-duplicate-imports": "warn",
        "no-var": "error",
        "prefer-const": "error",
        "prefer-spread": "warn",
        "prefer-template": "warn",
        "template-curly-spacing": [
            "warn",
            "never"
        ],
        "no-empty-function": "off",
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-non-null-assertion": "off"
    }
}